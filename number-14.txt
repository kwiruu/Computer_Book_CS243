section .data
  header_line: db " ", 10, "Input a number: "
  header_line_len: equ $-header_line

  choice_line: db "", 10, "Again? Y/N: "
  choice_line_len: equ $-choice_line

  thank_you_msg: db "Thank you."
  thank_you_msg_len: equ $-thank_you_msg

  greater_or_equal_line: db "The number is equal to or greater than 10"
  greater_or_equal_line_len: equ $-greater_or_equal_line
  less_than_line: db " ", 10, "The number is less than 10."
  less_than_line_len: equ $-less_than_line

section .bss
  user_input: resd 16
  num: resd 2
  buffer: resb 16
  choice: resb 2

section .text
_start:

  again:
  ; Display header line
  mov eax, 4
  mov ebx, 1
  mov ecx, header_line
  mov edx, header_line_len
  int 80h

  ; Read user input
  mov eax, 3
  mov ebx, 0
  mov ecx, user_input
  mov edx, 16
  int 80h

  ; Convert user input to integer
  xor eax, eax
  lea esi, [user_input]
  call convert_to_int

  ; Compare the number with 10
  cmp eax, 10

  ; Check if the number is greater than or equal to 10
  jge greater
  ; Display message for numbers less than 10
  mov eax, 4
  mov ebx, 1
  mov ecx, less_than_line
  mov edx, less_than_line_len
  int 80h
  jmp end_of_program
  greater:
  ; Display message for numbers greater than or equal to 10
  mov eax, 4
  mov ebx, 1
  mov ecx, greater_or_equal_line
  mov edx, greater_or_equal_line_len
  int 80h

  end_of_program:
  ; Display choice prompt
  mov eax, 4
  mov ebx, 1
  mov ecx, choice_line
  mov edx, choice_line_len
  int 80h

  ; Read user's choice
  mov eax, 3
  mov ebx, 0
  mov ecx, choice
  mov edx, 2
  int 80h

  ; Check if the user wants to enter another number
  lea esi, [choice]
  movzx edx, byte [esi]
  cmp edx, 'Y'
  je again

  ; Display thank you message
  mov eax, 4
  mov ebx, 1
  mov ecx, thank_you_msg
  mov edx, thank_you_msg_len
  int 80h

  ; Exit the program
  mov eax, 1
  mov ebx, 0
  int 80h

convert_to_int:
  movzx edx, byte [esi]
  cmp edx, 0xA
  je return 

  imul eax, 10
  sub edx, '0'
  add eax, edx
  inc esi
  jmp convert_to_int

convert_to_str:
  xor edx, edx 
  mov ebx, 10
  div ebx
  add edx, '0'
  mov [ecx], dl
  dec ecx

  test eax, eax
  jnz convert_to_str
  jmp return

return:
  ret
